module ant1024 is

!nat_bits 32

channel direction is
	(prob:real)
end channel

channel final is
	(prob:nat)
end channel
	
process MAIN [right,left,up,down:direction, live,dead:final] is
	move[right,left,up,down,live,dead](384 of nat,640 of nat,1024 of nat)
end process

process move[right,left,up,down:direction, live,dead:final](i,j,n:nat) is
	var il,jl,ir,jr,iu,ju,id,jd: nat
	in
	il:=i;
	jl:=j-1;
	ir:=i;
	jr:=j+1;
	iu:=i+1;
	ju:=j;
	id:=i-1;
	jd:=j;
	alt
		if (il=1 or il=n) then        --LEFT
			left(0.25);
			loop live(1 of nat) end loop
		elsif (jl=1 or jl=n) then
			left(0.25);
			loop dead(1 of nat) end loop
		else
			left(0.25);
			move[right,left,up,down,live,dead](il,jl,n)
		end if
	[]
		if (ir=1 or ir=n) then       --RIGHT
			right(0.25);
			loop live(1 of nat) end loop
		elsif (jr=1 or jr=n) then
			right(0.25);
			loop dead(1 of nat) end loop
		else
			right(0.25);
			move[right,left,up,down,live,dead](ir,jr,n)
		end if
	[]
		if (iu=1 or iu=n) then		--UP
			up(0.25);
			loop live(1 of nat) end loop
		elsif (ju=1 or ju=n) then
			up(0.25);
			loop dead(1 of nat) end loop
		else
			up(0.25);
			move[right,left,up,down,live,dead](iu,ju,n)
		end if
	[]
		if (id=1 or id=n) then		--DOWN
			down(0.25);
			loop live(1 of nat) end loop
		elsif (jd=1 or jd=n) then
			down(0.25);
			loop dead(1 of nat) end loop
		else
			down(0.25);
			move[right,left,up,down,live,dead](id,jd,n)
		end if
	end alt
	end var
end process

end module	
